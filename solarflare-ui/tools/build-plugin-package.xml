<project name="build-plugin-package" default="build" >
   <description>
      - When called without argument this script builds a standard plugin package folder,
        using solarflare-ui and solarflare-service, with this structure:

             solarflare
                  plugin-package.xml
                  /plugins
                     gson-2.3.1.jar
                     solarflare-ui.war
                     solarflare-service.jar

      - When called with "-DuseHttpProxy" the plugin package is built using the http-proxy-servle,
        i.e. solarflare-service.jar is replaced by http-proxy-servlet.jar.

      - When called with "-DnoJava" the plugin package is build without any java service.
   </description>

   <property environment="env"/>
   <property name="VSPHERE_SDK_HOME" value="${env.VSPHERE_SDK_HOME}"/>
   <property name="BUILD_DIR" value="${basedir}/../target"/>
   <property name="SERVICE_DIR" value="${basedir}/../../solarflare-service"/>
    <property name="FIRMWARE_TOOL_DIR" value="${basedir}/../../firmware-packaging-tool" />
   <!-- Conditional build variables -->
   <property name="USE_HTTP_PROXY" value="${useHttpProxy}"/>
   <property name="NO_JAVA" value="${noJava}"/>
   
   <!-- custome defind property -->
   <property name="BUILD_PRIFIX" value="solarflare" />
   <property name="VERSION" value="1.110.0"/>
   <property name="BUILD_ZIP_DIR" value="${basedir}/../../installer/dist/Tomcat_Server/webapps" />
   <property name="PLUGIN_REGISTRATION" value="${basedir}/../../PluginRegistration"/>
   <property name="P_GOLES" value="clean install" />
   <property name="PLUGIN_PATH" value="solarflare-vcp" />
   <property name="CLASSES" value="${SERVICE_DIR}/target/classes" />
   <property name="FIRMWARE_JAR" value="${FIRMWARE_TOOL_DIR}/target/firmware-packaging-tool.jar" />
   <property name="FIRMWARE_COPY_TO" value="${basedir}/../../installer/dist/Tomcat_Server/webapps/firmware"/>
	<target name="firmware">
		<input message="Enter firmware binary file directory path :" addproperty="DEFAULT_FIRMWARE_PATH"/>
	</target>
   <target name="build" depends="firmware, buildCheck, buildUiWar, buildServiceJar, build-firmware-packaging-tool, run_utility, createPluginPackageDir,
         createPluginProxyPackageDir, createPluginNoJavaPackageDir, mvnWindowsSetup, mvnUnixSetup, runMvnGoals,copyPluginPackageDir, copyRegistrationWar">
      <echo level="info">*** You must restart the Virgo server to use the new plugin package! ***</echo>
   </target>
   <target name="buildCheck">
      <condition property="NORMAL_BUILD">
         <and>
            <isfalse value="${USE_HTTP_PROXY}"/>
            <isfalse value="${NO_JAVA}"/>
         </and>
      </condition>
   </target>

   <target name="buildUiWar">
      <ant antfile="${basedir}/build-war.xml" dir="${basedir}" inheritAll="true"/>
   </target>

   <target name="buildServiceJar" if="${NORMAL_BUILD}">
      <ant antfile="${SERVICE_DIR}/tools/build-java.xml" dir="${SERVICE_DIR}/tools" inheritAll="false"/>
   </target>
   
   <target name="build-firmware-packaging-tool" if="${NORMAL_BUILD}">
      <ant antfile="${FIRMWARE_TOOL_DIR}/build.xml" dir="${FIRMWARE_TOOL_DIR}" inheritAll="false"/>
   </target>
   
   <target name="run_utility">
		<java classname="com.solarflare.vcp.helper.XMLUtility" fork="true" failonerror="yes">
			<arg value="${VERSION}"/>
			<arg value="./plugin-package.xml"/>
			<classpath>
				<pathelement path="${CLASSES}"/>
			</classpath>
		</java>
		<java classname="com.solarflare.firmware.Runner" fork="true" failonerror="yes">
           <arg value="${DEFAULT_FIRMWARE_PATH}"/>
			<classpath>
               <pathelement path="${FIRMWARE_JAR}"/>
			</classpath>
		</java>
   </target>
   <!-- Edit plugin package before copy-->
	
   <target name="createPluginPackageDir" if="${NORMAL_BUILD}" depends="run_utility">
      <mkdir dir="${BUILD_DIR}/solarflare" />
      <mkdir dir="${BUILD_DIR}/solarflare/plugins" />
      <copy todir="${BUILD_DIR}/solarflare" file="./plugin-package.xml"/>
      <copy todir="${BUILD_DIR}/solarflare/plugins" file="${BUILD_DIR}/solarflare-ui.war"/>
      <copy todir="${BUILD_DIR}/solarflare/plugins" file="${SERVICE_DIR}/target/solarflare-service.jar"/>
      <!-- gson-2.3.1.jar is a 3rd party lib used by the service bundle -->
      <copy todir="${BUILD_DIR}/solarflare/plugins" file="${VSPHERE_SDK_HOME}/libs/gson-2.3.1.jar"/>
      <copy todir="${BUILD_DIR}/solarflare/plugins" file="${VSPHERE_SDK_HOME}/libs/vim25.jar"/>
      <copy todir="${BUILD_DIR}/solarflare/plugins" file="${SERVICE_DIR}/libs/sblim-cim-client2-2.1.1.jar"/>
	  
   </target>

   <target name="createPluginProxyPackageDir" if="${USE_HTTP_PROXY}"
           depends="http-proxy-servlet-check, http-proxy-servlet-warn">
      <mkdir dir="${BUILD_DIR}/solarflare" />
      <mkdir dir="${BUILD_DIR}/solarflare/plugins" />
      <copy tofile="${BUILD_DIR}/solarflare/plugin-package.xml" file="./plugin-proxy-package.xml"/>
      <copy todir="${BUILD_DIR}/solarflare/plugins" file="${BUILD_DIR}/solarflare-ui.war"/>
      <copy todir="${BUILD_DIR}/solarflare/plugins" file="${basedir}/../tools/http-proxy-servlet.jar"/>
   </target>

   <target name="http-proxy-servlet-check" if="${USE_HTTP_PROXY}">
      <available file="http-proxy-servlet.jar"  property="http-proxy-servlet.found"/>
   </target>

   <target name="http-proxy-servlet-warn"  if="${USE_HTTP_PROXY}" unless="${http-proxy-servlet.found}">
      <fail message="MISSING http-proxy-servlet.jar IN /tools!
      ${line.separator}=> COPY http-proxy-servlet.jar FROM plugin-seed/tools/http-proxy-tool/http-proxy-tool-plugin/plugins
TO THIS /tools FOLDER."/>
   </target>

   <target name="createPluginNoJavaPackageDir" if="${NO_JAVA}">
      <mkdir dir="${BUILD_DIR}/solarflare" />
      <mkdir dir="${BUILD_DIR}/solarflare/plugins" />
      <copy tofile="${BUILD_DIR}/solarflare/plugin-package.xml" file="./plugin-nojava-package.xml"/>
      <copy todir="${BUILD_DIR}/solarflare/plugins" file="${BUILD_DIR}/solarflare-ui.war"/>
   </target>

   <condition property="is_windows">
        <os family="windows"/>
    </condition>
	<condition property="is_unix">
        <os family="unix"/>
    </condition>
	<target name="mvnWindowsSetup" if="is_windows">
		<property name="mvn.executable" value="cmd" />
		<property name="mvn.args" value="/c" />
	</target>
	<target name="mvnUnixSetup" if="is_unix">
		<property name="mvn.executable" value="sh" />
		<property name="mvn.args" value="-c" />
	</target>
	<!-- Before build modify property file content of version and host ip-->
	<propertyfile file="${PLUGIN_REGISTRATION}/src/main/webapp/WEB-INF/registerPlugin.properties">
		<entry key="pluginPath" value="${PLUGIN_PATH}/${BUILD_PRIFIX}-${VERSION}.zip" />
		<entry key="version" value="${VERSION}" />
	</propertyfile>
	<target name="runMvnGoals" depends="mvnWindowsSetup, mvnUnixSetup">
		<exec dir="${PLUGIN_REGISTRATION}" executable="${mvn.executable}" >
			<arg line="${mvn.args} 'mvn ${P_GOLES}'" />
		</exec>
	</target>
   <target name="copyPluginPackageDir">
      <delete dir="${VSPHERE_SDK_HOME}/vsphere-ui/plugin-packages/solarflare" quiet="true"/>
	  <delete dir="${BUILD_ZIP_DIR}/solarflare-vcp" quiet="true" />
	  <mkdir dir="${BUILD_ZIP_DIR}"/>
      <copy todir="${VSPHERE_SDK_HOME}/vsphere-ui/plugin-packages/solarflare">
         <fileset dir="${BUILD_DIR}/solarflare"/>
      </copy>
	  <zip  destfile="${BUILD_ZIP_DIR}/solarflare-vcp/${BUILD_PRIFIX}-${VERSION}.zip" basedir="${BUILD_DIR}/solarflare"/>
   </target>
  
	<target name="copyRegistrationWar" description="Copy war file in plugin dist directory">
		<delete dir="${BUILD_ZIP_DIR}/plugin-registration.war" quiet="true"/>
		<copy todir="${BUILD_ZIP_DIR}/" file="${PLUGIN_REGISTRATION}/target/plugin-registration.war"/>
		<copy todir="${FIRMWARE_COPY_TO}">
			<fileset dir="${DEFAULT_FIRMWARE_PATH}">
			<include name="**/*.*"/>
      </fileset>
		</copy>
	</target>

</project>